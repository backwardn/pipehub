{{- define "dynamic.go" -}}
// Code generated by PipeHub; DO NOT EDIT.

package pipe
{{ if gt (len .Pipe) 0 }}
import (
	"github.com/pkg/errors"
{{ range .Pipe }}
{{- if .ImportPathAlias }}
	{{ .ImportPathAlias }} "{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}"
{{- else }}
	"{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}"
{{- end }}
{{- end }}
)
{{ end }}
func (m *Manager) InitPipes() error {
{{- if gt (len .Pipe) 0 }}
{{- if eq (len .Pipe) 1 }}
	{{- $pipe := (index .Pipe 0) }}
	state := [][]string{{`{{`}}"{{ $pipe.ImportPath }}", "{{ if $pipe.Module }}{{ $pipe.Module }}{{ else }}{{ $pipe.Revision }}{{ end }}"}}
{{ else }}
	state := [][]string{
	{{- range .Pipe }}
		{"{{ .ImportPath }}", "{{ if .Module }}{{ .Module }}{{ else }}{{ .Revision }}{{ end }}"},
	{{- end }}
	}
{{- end }}
	if err := m.available(state); err != nil {
		return errors.Wrap(err, "missing pipe during compilation")
	}
{{ range .Pipe }}
	if m.enabled("{{ .ImportPath }}", "{{ if .Module }}{{ .Module }}{{ else }}{{ .Revision }}{{ end }}") {
		cfg := m.config("{{ .ImportPath }}", "{{ if .Module }}{{ .Module }}{{ else }}{{ .Revision }}{{ end }}")
		client, err := {{ .Alias }}.NewClient(cfg)
		if err != nil {
			return errors.Wrap(err, "'{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}' initialization error")
		}

		m.instances["{{ if .ImportPathAlias }}{{ .ImportPathAlias }}{{ else }}{{ .Alias }}{{ end }}"] = instance{
			id:         "{{ if .Module }}{{ .Module }}{{ else }}{{ .ImportPath }}{{ end }}",
			importPath: "{{ .ImportPath }}",
			instancer:  client,
		}
	}
{{ end }}
{{- end }}
	return nil
}
{{ end }}
